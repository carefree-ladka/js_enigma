"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1711],{8696:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>h});var s=t(4848),n=t(8453);const i={title:"DFS & BFS on Graphs",description:"A comprehensive guide to implementing Depth-First Search (DFS) & BFS (Breadth-First Search) on graphs."},a=void 0,o={id:"tutorial-basics/DFSBFSGraph",title:"DFS & BFS on Graphs",description:"A comprehensive guide to implementing Depth-First Search (DFS) & BFS (Breadth-First Search) on graphs.",source:"@site/docs/tutorial-basics/DFSBFSGraph.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/DFSBFSGraph",permalink:"/js_enigma/docs/tutorial-basics/DFSBFSGraph",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/DFSBFSGraph.mdx",tags:[],version:"current",frontMatter:{title:"DFS & BFS on Graphs",description:"A comprehensive guide to implementing Depth-First Search (DFS) & BFS (Breadth-First Search) on graphs."},sidebar:"tutorialSidebar",previous:{title:"Counting Sort",permalink:"/js_enigma/docs/tutorial-basics/CountingSort"},next:{title:"Depth-First Search (DFS) for Trees",permalink:"/js_enigma/docs/tutorial-basics/DFSTree"}},d={},h=[{value:"Depth-First Search (DFS) on Graphs",id:"depth-first-search-dfs-on-graphs",level:2},{value:"How DFS Works",id:"how-dfs-works",level:2},{value:"Pseudocode",id:"pseudocode",level:3},{value:"Recusrive DFS",id:"recusrive-dfs",level:3},{value:"Iterative DFS",id:"iterative-dfs",level:3},{value:"How BFS Works",id:"how-bfs-works",level:2},{value:"Pseudocode",id:"pseudocode-1",level:3},{value:"BFS",id:"bfs",level:3}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"depth-first-search-dfs-on-graphs",children:"Depth-First Search (DFS) on Graphs"}),"\n",(0,s.jsx)(r.p,{children:"Depth-First Search (DFS) is a fundamental algorithm for traversing or searching through graph data structures. The algorithm starts at a given node and explores as far as possible along each branch before backtracking."}),"\n",(0,s.jsx)(r.h2,{id:"how-dfs-works",children:"How DFS Works"}),"\n",(0,s.jsx)(r.p,{children:"DFS can be implemented using either a recursive approach or an iterative approach with a stack. The key idea is to start from a source node, visit its adjacent nodes, and continue this process until all nodes reachable from the source are visited."}),"\n",(0,s.jsx)(r.h3,{id:"pseudocode",children:"Pseudocode"}),"\n",(0,s.jsx)(r.p,{children:"Here's the pseudocode for a recursive DFS on an undirected graph:"}),"\n",(0,s.jsx)(r.h3,{id:"recusrive-dfs",children:"Recusrive DFS"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-Javascript",children:"const dfs = (graph, start, visited = new Set()) => {\r\n  if (visited.has(start)) return\r\n\r\n  console.log(start);\r\n  visited.add(start)\r\n\r\n  for (const neighbour of graph[start]) {\r\n    if (!visited.has(neighbour)) {\r\n      dfs(graph, neighbour, visited)\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"iterative-dfs",children:"Iterative DFS"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-Javascript",children:"const dfsIterative = (graph, start, visited = new Set()) => {\r\n  const stack = [start]\r\n  visited.add(start)\r\n\r\n  while (stack.length) {\r\n    const current = stack.pop()\r\n    console.log(current);\r\n    for (const neighbour of graph[current]) {\r\n      if (!visited.has(neighbour)) {\r\n        stack.push(neighbour)\r\n        visited.add(neighbour)\r\n      }\r\n    }\r\n\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h1,{id:"breadth-first-search-bfs-on-graphs",children:"Breadth-First Search (BFS) on Graphs"}),"\n",(0,s.jsx)(r.p,{children:"Breadth-First Search (BFS) is an algorithm used for traversing or searching through graph or tree data structures. The algorithm starts at a given node and explores all of its neighbors at the present depth before moving on to nodes at the next depth level."}),"\n",(0,s.jsx)(r.h2,{id:"how-bfs-works",children:"How BFS Works"}),"\n",(0,s.jsx)(r.p,{children:"BFS is typically implemented using a queue data structure. It starts from a source node and explores all of its neighbors first before moving on to the next layer of nodes. This ensures that nodes are visited in the order of their distance from the source node."}),"\n",(0,s.jsx)(r.h3,{id:"pseudocode-1",children:"Pseudocode"}),"\n",(0,s.jsx)(r.p,{children:"Here\u2019s the pseudocode for BFS on an undirected graph:"}),"\n",(0,s.jsx)(r.h3,{id:"bfs",children:"BFS"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-Javascript",children:"const bfs = (graph, start, visited = new Set()) => {\r\n  const queue = [start]\r\n  visited.add(start)\r\n\r\n  while (queue.length) {\r\n    const current = queue.shift()\r\n    console.log(current);\r\n    for (const neighbour of graph[current]) {\r\n      if (!visited.has(neighbour)) {\r\n        queue.push(neighbour)\r\n        visited.add(neighbour)\r\n      }\r\n    }\r\n\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-Javascript",children:"const graph = {\r\n  1: [2, 3],\r\n  2: [1, 4],\r\n  3: [1, 5],\r\n  4: [2, 6],\r\n  5: [3],\r\n  6: [4]\r\n};\r\n\r\ndfs(graph, 1)\r\ndfsIterative(graph,1)\r\nbfs(graph, 1)\n"})})]})}function l(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>o});var s=t(6540);const n={},i=s.createContext(n);function a(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);