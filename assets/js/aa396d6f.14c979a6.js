"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9135],{3361:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var t=n(4848),s=n(8453);const i={title:"Binary Search Tree"},o=void 0,l={id:"tutorial-extras/BinarySearchTree",title:"Binary Search Tree",description:"Binary Search Tree (BST)",source:"@site/docs/tutorial-extras/BinarySearchTree.mdx",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/BinarySearchTree",permalink:"/js_enigma/docs/tutorial-extras/BinarySearchTree",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-extras/BinarySearchTree.mdx",tags:[],version:"current",frontMatter:{title:"Binary Search Tree"},sidebar:"tutorialSidebar",previous:{title:"React Interview Questions",permalink:"/js_enigma/docs/tutorial-extras/Core JavaScript/React"}},a={},h=[{value:"Binary Search Tree (BST)",id:"binary-search-tree-bst",level:2},{value:"Properties",id:"properties",level:3},{value:"Operations",id:"operations",level:3},{value:"Time Complexity",id:"time-complexity",level:3},{value:"Example",id:"example",level:3}];function c(e){const r={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"binary-search-tree-bst",children:"Binary Search Tree (BST)"}),"\n",(0,t.jsxs)(r.p,{children:["A ",(0,t.jsx)(r.strong,{children:"Binary Search Tree (BST)"})," is a binary tree where each node has a key greater than all keys in its left subtree and smaller than all keys in its right subtree. This property makes BSTs useful for searching, inserting, and deleting elements efficiently."]}),"\n",(0,t.jsx)(r.h3,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Binary Tree"}),": Each node has at most two children."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Ordered"}),": For any node with a key ",(0,t.jsx)(r.code,{children:"K"}),":","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["All keys in the left subtree are less than ",(0,t.jsx)(r.code,{children:"K"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:["All keys in the right subtree are greater than ",(0,t.jsx)(r.code,{children:"K"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"operations",children:"Operations"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Insertion"}),": Adds a new node to the BST while maintaining the BST property."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Search"}),": Finds a node with a specific key."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Deletion"}),": Removes a node while maintaining the BST property."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Traversal"}),": Visits all nodes in a specific order. Common traversals include:","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"In-Order"}),": Left, Root, Right"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Pre-Order"}),": Root, Left, Right"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Post-Order"}),": Left, Right, Root"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Insertion"}),": O(log n) on average, O(n) in the worst case (when the tree is unbalanced)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Search"}),": O(log n) on average, O(n) in the worst case"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Deletion"}),": O(log n) on average, O(n) in the worst case"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Traversal"}),": O(n)"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(r.p,{children:"Here\u2019s a basic implementation of a Binary Search Tree in JavaScript:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:'// Define a class for a TreeNode, representing each node in the binary search tree\r\nclass TreeNode {\r\n  constructor(key) {\r\n    this.key = key;       // The value of the node\r\n    this.left = null;     // Reference to the left child node\r\n    this.right = null;    // Reference to the right child node\r\n  }\r\n}\r\n\r\n// Define a class for the Binary Search Tree\r\nclass BinarySearchTree {\r\n  constructor() {\r\n    this.root = null; // The root of the tree, initially empty\r\n  }\r\n\r\n  // Method to insert a new key into the BST\r\n  insert(key) {\r\n    if (this.root === null) {\r\n      // If the tree is empty, create the root node\r\n      this.root = new TreeNode(key);\r\n    } else {\r\n      // Otherwise, insert the key in the correct position recursively\r\n      this.insertRec(this.root, key);\r\n    }\r\n  }\r\n\r\n  // Recursive method to insert a new key into the BST\r\n  insertRec(node, key) {\r\n    if (key < node.key) {\r\n      // If the key is less than the current node\'s key, go to the left subtree\r\n      if (node.left === null) {\r\n        // If the left child is null, create a new node\r\n        node.left = new TreeNode(key);\r\n      } else {\r\n        // Otherwise, recursively insert in the left subtree\r\n        this.insertRec(node.left, key);\r\n      }\r\n    } else {\r\n      // If the key is greater than or equal to the current node\'s key, go to the right subtree\r\n      if (node.right === null) {\r\n        // If the right child is null, create a new node\r\n        node.right = new TreeNode(key);\r\n      } else {\r\n        // Otherwise, recursively insert in the right subtree\r\n        this.insertRec(node.right, key);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Method to search for a key in the BST\r\n  search(key) {\r\n    return this.searchRec(this.root, key);\r\n  }\r\n\r\n  // Recursive method to search for a key in the BST\r\n  searchRec(node, key) {\r\n    if (node === null || node.key === key) {\r\n      // If the node is null or the key is found, return the node\r\n      return node;\r\n    }\r\n    if (key < node.key) {\r\n      // If the key is less than the current node\'s key, search in the left subtree\r\n      return this.searchRec(node.left, key);\r\n    }\r\n    // If the key is greater than the current node\'s key, search in the right subtree\r\n    return this.searchRec(node.right, key);\r\n  }\r\n\r\n  // Method to perform an in-order traversal of the BST\r\n  inorderTraversal(node, result = []) {\r\n    if (node !== null) {\r\n      // Traverse the left subtree\r\n      this.inorderTraversal(node.left, result);\r\n      // Visit the current node\r\n      result.push(node.key);\r\n      // Traverse the right subtree\r\n      this.inorderTraversal(node.right, result);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\n// Example Usage\r\nconst bst = new BinarySearchTree();\r\nbst.insert(10); // Insert the key 10\r\nbst.insert(5);  // Insert the key 5\r\nbst.insert(15); // Insert the key 15\r\nbst.insert(3);  // Insert the key 3\r\nbst.insert(7);  // Insert the key 7\r\n\r\nconsole.log("Inorder Traversal:", bst.inorderTraversal(bst.root)); // Output: [3, 5, 7, 10, 15]\r\nconsole.log("Search 7:", bst.search(7) ? "Found" : "Not Found"); // Output: Found\r\nconsole.log("Search 20:", bst.search(20) ? "Found" : "Not Found"); // Output: Not Found\n'})})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var t=n(6540);const s={},i=t.createContext(s);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);