"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9194],{7666:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var n=r(4848),t=r(8453);const s={title:"Euclid's Algorithm for Greatest Common Divisor (GCD)"},o=void 0,c={id:"tutorial-basics/Euclid",title:"Euclid's Algorithm for Greatest Common Divisor (GCD)",description:"Euclid's Algorithm for Greatest Common Divisor (GCD)",source:"@site/docs/tutorial-basics/Euclid.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Euclid",permalink:"/js_enigma/docs/tutorial-basics/Euclid",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/Euclid.mdx",tags:[],version:"current",frontMatter:{title:"Euclid's Algorithm for Greatest Common Divisor (GCD)"},sidebar:"tutorialSidebar",previous:{title:"Dynamic Programming",permalink:"/js_enigma/docs/tutorial-basics/DynamicProgramming"},next:{title:"Fenwick Tree Tutorial",permalink:"/js_enigma/docs/tutorial-basics/Fenwick"}},l={},d=[{value:"Euclid&#39;s Algorithm for Greatest Common Divisor (GCD)",id:"euclids-algorithm-for-greatest-common-divisor-gcd",level:2},{value:"Concept",id:"concept",level:3},{value:"Algorithm Steps",id:"algorithm-steps",level:3},{value:"Code Example",id:"code-example",level:3}];function a(e){const i={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h2,{id:"euclids-algorithm-for-greatest-common-divisor-gcd",children:"Euclid's Algorithm for Greatest Common Divisor (GCD)"}),"\n",(0,n.jsx)(i.p,{children:"Euclid's Algorithm is a classic algorithm for finding the greatest common divisor (GCD) of two integers. The GCD is the largest positive integer that divides both numbers without leaving a remainder. Euclid's Algorithm is based on the principle that the GCD of two numbers also divides their difference."}),"\n",(0,n.jsx)(i.h3,{id:"concept",children:"Concept"}),"\n",(0,n.jsx)(i.p,{children:"Euclid's Algorithm uses the following principle:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["The GCD of two numbers ",(0,n.jsx)(i.code,{children:"a"})," and ",(0,n.jsx)(i.code,{children:"b"})," is the same as the GCD of ",(0,n.jsx)(i.code,{children:"b"})," and ",(0,n.jsx)(i.code,{children:"a % b"}),", where ",(0,n.jsx)(i.code,{children:"%"})," denotes the modulus operation."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"This process is repeated until one of the numbers becomes zero. At that point, the non-zero number is the GCD."}),"\n",(0,n.jsx)(i.h3,{id:"algorithm-steps",children:"Algorithm Steps"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Initial Step"}),": Given two numbers ",(0,n.jsx)(i.code,{children:"a"})," and ",(0,n.jsx)(i.code,{children:"b"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Modulo Operation"}),": Compute the remainder ",(0,n.jsx)(i.code,{children:"r"})," when ",(0,n.jsx)(i.code,{children:"a"})," is divided by ",(0,n.jsx)(i.code,{children:"b"})," (i.e., ",(0,n.jsx)(i.code,{children:"r = a % b"}),")."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Update Numbers"}),": Replace ",(0,n.jsx)(i.code,{children:"a"})," with ",(0,n.jsx)(i.code,{children:"b"})," and ",(0,n.jsx)(i.code,{children:"b"})," with ",(0,n.jsx)(i.code,{children:"r"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Repeat"}),": Continue the process until ",(0,n.jsx)(i.code,{children:"b"})," becomes zero."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Result"}),": The GCD is the non-zero number."]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"code-example",children:"Code Example"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"JavaScript Implementation"}),":"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-javascript",children:"/**\r\n * Compute the Greatest Common Divisor (GCD) of two integers using Euclid's Algorithm.\r\n * @param {number} a - The first integer.\r\n * @param {number} b - The second integer.\r\n * @return {number} - The GCD of the two integers.\r\n */\r\nconst gcd = (a, b) => {\r\n  while (b !== 0) {\r\n    const temp = b;\r\n    b = a % b;\r\n    a = temp;\r\n  }\r\n  return a;\r\n};\n"})})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,i,r)=>{r.d(i,{R:()=>o,x:()=>c});var n=r(6540);const t={},s=n.createContext(t);function o(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);