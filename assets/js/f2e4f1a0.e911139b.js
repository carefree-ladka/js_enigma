"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4400],{8460:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>h});var r=n(4848),i=n(8453);const s={title:"Dijkstra's Algorithm"},o=void 0,l={id:"tutorial-basics/Dijkstra",title:"Dijkstra's Algorithm",description:"Dijkstra's Algorithm",source:"@site/docs/tutorial-basics/Dijkstra.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Dijkstra",permalink:"/docs/tutorial-basics/Dijkstra",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/Dijkstra.mdx",tags:[],version:"current",frontMatter:{title:"Dijkstra's Algorithm"},sidebar:"tutorialSidebar",previous:{title:"Depth-First Search (DFS) for Trees",permalink:"/docs/tutorial-basics/DFSTree"},next:{title:"Dutch National Flag Algorithm",permalink:"/docs/tutorial-basics/DutchNationalFlag"}},a={},h=[{value:"Dijkstra&#39;s Algorithm",id:"dijkstras-algorithm",level:2},{value:"Algorithm Overview",id:"algorithm-overview",level:3},{value:"Steps of the Algorithm",id:"steps-of-the-algorithm",level:3},{value:"Graph Problems",id:"graph-problems",level:3},{value:"Pathfinding and Search Problems",id:"pathfinding-and-search-problems",level:3},{value:"Network Delay",id:"network-delay",level:3}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"dijkstras-algorithm",children:"Dijkstra's Algorithm"}),"\n",(0,r.jsx)(t.p,{children:"Dijkstra's Algorithm is a classic algorithm used for finding the shortest path between nodes in a graph. It works well with graphs where all edge weights are non-negative. The algorithm efficiently finds the shortest path from a source node to all other nodes in the graph."}),"\n",(0,r.jsx)(t.h3,{id:"algorithm-overview",children:"Algorithm Overview"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Initialization"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Set the distance to the source node to ",(0,r.jsx)(t.code,{children:"0"})," and all other nodes to infinity."]}),"\n",(0,r.jsx)(t.li,{children:"Use a priority queue (min-heap) to store nodes with their distances."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Process Nodes"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Extract the node with the minimum distance from the priority queue."}),"\n",(0,r.jsx)(t.li,{children:"Update the distances to its neighboring nodes."}),"\n",(0,r.jsx)(t.li,{children:"If a shorter path is found, update the distance and add the neighbor to the priority queue."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Termination"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"The algorithm terminates when all nodes have been processed, or the priority queue is empty."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"steps-of-the-algorithm",children:"Steps of the Algorithm"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Initialize Distances"}),":"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-Javascript",children:"function dijkstra(graph, start) {\r\n  const distances = {};\r\n  const prev = {};\r\n  const pq = new MinHeap();\r\n\r\n  // Initialize distances and priority queue\r\n  for (const node in graph) {\r\n    distances[node] = Infinity;\r\n    prev[node] = null;\r\n  }\r\n  distances[start] = 0;\r\n  pq.enqueue(start, 0);\r\n\r\n  while (pq.heap.length > 0) {\r\n    const { node: u } = pq.dequeue();\r\n\r\n    for (const neighbor in graph[u]) {\r\n      const alt = distances[u] + graph[u][neighbor];\r\n      if (alt < distances[neighbor]) {\r\n        distances[neighbor] = alt;\r\n        prev[neighbor] = u;\r\n        pq.enqueue(neighbor, alt);\r\n      }\r\n    }\r\n  }\r\n\r\n  return { distances, prev };\r\n}\r\n\r\n// Example usage:\r\nconst graph = {\r\n  A: { B: 1, C: 4 },\r\n  B: { C: 2, D: 5 },\r\n  C: { D: 1 },\r\n  D: {}\r\n};\r\n\r\nconst { distances, prev } = dijkstra(graph, 'A');\n"})}),"\n",(0,r.jsx)(t.h1,{id:"some-common-dijkstras-problems",children:"Some common Dijkstra's Problems"}),"\n",(0,r.jsx)(t.h3,{id:"graph-problems",children:"Graph Problems"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/cheapest-flights-within-k-stops/",children:"Cheapest Flights Within K Stops"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/bus-routes/",children:"Bus Routes"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/design-graph-with-shortest-path-calculator/",children:"Design Graph With Shortest Path Calculator"})}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"pathfinding-and-search-problems",children:"Pathfinding and Search Problems"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/swim-in-rising-water/",children:"Swim in Rising Water"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/shortest-path-in-binary-matrix/",children:"Shortest Path in Binary Matrix"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/path-with-minimum-effort/",children:"Path With Minimum Effort"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/find-the-safest-path-in-a-grid/",children:"Find the Safest Path in a Grid"})}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"network-delay",children:"Network Delay"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/network-delay-time/description/",children:"Network Delay Time"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var r=n(6540);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);