"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7523],{5026:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=i(4848),t=i(8453);const a={title:"Sliding Window Technique"},s=void 0,o={id:"tutorial-basics/SlidingWindow",title:"Sliding Window Technique",description:"Sliding Window Technique",source:"@site/docs/tutorial-basics/SlidingWindow.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/SlidingWindow",permalink:"/js_enigma/docs/tutorial-basics/SlidingWindow",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/SlidingWindow.mdx",tags:[],version:"current",frontMatter:{title:"Sliding Window Technique"},sidebar:"tutorialSidebar",previous:{title:"Segment Tree Tutorial",permalink:"/js_enigma/docs/tutorial-basics/SegmentTree"},next:{title:"Fast and Slow Pointers Technique",permalink:"/js_enigma/docs/tutorial-basics/SlowFastPointer"}},d={},l=[{value:"Sliding Window Technique",id:"sliding-window-technique",level:2},{value:"Problem Statement",id:"problem-statement",level:3},{value:"Types of Sliding Window Techniques",id:"types-of-sliding-window-techniques",level:3},{value:"Algorithm Overview",id:"algorithm-overview",level:3},{value:"Fixed-Size Window Example",id:"fixed-size-window-example",level:3},{value:"Variable-Size Window Example",id:"variable-size-window-example",level:3}];function m(n){const e={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"sliding-window-technique",children:"Sliding Window Technique"}),"\n",(0,r.jsx)(e.p,{children:'The Sliding Window technique is a powerful approach used to solve problems involving sequences, substrings, or subarrays efficiently. It optimizes the process of examining or modifying contiguous segments of an array or string by maintaining a window of fixed or variable size that "slides" across the data.'}),"\n",(0,r.jsx)(e.h3,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsx)(e.p,{children:"The Sliding Window technique is commonly applied to problems where you need to find the maximum, minimum, or other aggregated value of a contiguous segment within an array or string, or where you need to identify specific patterns or conditions."}),"\n",(0,r.jsx)(e.h3,{id:"types-of-sliding-window-techniques",children:"Types of Sliding Window Techniques"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Fixed-Size Window"}),": The window has a constant size and moves through the data. Useful for problems like finding the maximum sum of any subarray of size ",(0,r.jsx)(e.code,{children:"k"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Variable-Size Window"}),": The window size is adjusted dynamically based on certain conditions. Useful for problems like finding the smallest substring containing all characters of a given set."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"algorithm-overview",children:"Algorithm Overview"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Initialization"}),": Set up pointers or indices to represent the current window."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Expand Window"}),": Extend the window by moving the end pointer or index."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Contract Window"}),": Shrink the window by moving the start pointer or index when necessary."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Update Result"}),": Perform calculations or checks within the window to maintain or update the result."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"fixed-size-window-example",children:"Fixed-Size Window Example"}),"\n",(0,r.jsxs)(e.p,{children:["Find the maximum sum of any subarray of size ",(0,r.jsx)(e.code,{children:"k"})," in a given array:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"/**\r\n * Find the maximum sum of any subarray of size k.\r\n * @param {number[]} arr - The input array.\r\n * @param {number} k - The size of the subarray.\r\n * @return {number} - The maximum sum of any subarray of size k.\r\n */\r\nconst maxSumSubarray = (arr, k) => {\r\n  let maxSum = 0;\r\n  let windowSum = 0;\r\n\r\n  // Compute the sum of the first window\r\n  for (let i = 0; i < k; i++) {\r\n    windowSum += arr[i];\r\n  }\r\n  maxSum = windowSum;\r\n\r\n  // Slide the window across the array\r\n  for (let i = k; i < arr.length; i++) {\r\n    windowSum += arr[i] - arr[i - k];\r\n    maxSum = Math.max(maxSum, windowSum);\r\n  }\r\n\r\n  return maxSum;\r\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"variable-size-window-example",children:"Variable-Size Window Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-JavaScript",children:"/**\r\n * Find the maximum sum of any subarray with length between minLen and maxLen.\r\n * @param {number[]} arr - The input array.\r\n * @param {number} minLen - Minimum length of the subarray.\r\n * @param {number} maxLen - Maximum length of the subarray.\r\n * @return {number} - The maximum sum of any valid subarray.\r\n */\r\nconst maxSumSubarrayVariableSize = (arr, minLen, maxLen) => {\r\n  let start = 0;\r\n  let end = 0;\r\n  let currentSum = 0;\r\n  let maxSum = -Infinity;\r\n\r\n  while (end < arr.length) {\r\n    // Expand the window by including arr[end]\r\n    currentSum += arr[end];\r\n\r\n    // Ensure the window size is within the specified range\r\n    if (end - start + 1 > maxLen) {\r\n      currentSum -= arr[start];\r\n      start++;\r\n    }\r\n\r\n    // Update maxSum if the current window size is within the range\r\n    if (end - start + 1 >= minLen) {\r\n      maxSum = Math.max(maxSum, currentSum);\r\n    }\r\n\r\n    // Move the end pointer to expand the window\r\n    end++;\r\n  }\r\n\r\n  return maxSum;\r\n}\r\n\r\n// Example usage:\r\nconst arr = [1, 2, 3, 4, 5, 6, 7];\r\nconst minLen = 2;\r\nconst maxLen = 4;\r\n\r\nconsole.log(maxSumSubarrayVariableSize(arr, minLen, maxLen)); // Output: 22\r\n\n"})})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>o});var r=i(6540);const t={},a=r.createContext(t);function s(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);