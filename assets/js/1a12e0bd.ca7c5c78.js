"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[817],{7277:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=i(4848),r=i(8453);const s={title:"Fenwick Tree Tutorial",description:"A comprehensive guide to Fenwick Trees with code examples in JavaScript."},a="Fenwick Tree Tutorial",o={id:"tutorial-basics/Fenwick",title:"Fenwick Tree Tutorial",description:"A comprehensive guide to Fenwick Trees with code examples in JavaScript.",source:"@site/docs/tutorial-basics/Fenwick.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Fenwick",permalink:"/js_enigma/docs/tutorial-basics/Fenwick",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/Fenwick.mdx",tags:[],version:"current",frontMatter:{title:"Fenwick Tree Tutorial",description:"A comprehensive guide to Fenwick Trees with code examples in JavaScript."},sidebar:"tutorialSidebar",previous:{title:"Euclid's Algorithm for Greatest Common Divisor (GCD)",permalink:"/js_enigma/docs/tutorial-basics/Euclid"},next:{title:"Fisher-Yates Shuffle Algorithm",permalink:"/js_enigma/docs/tutorial-basics/FisherYates"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Key Operations",id:"key-operations",level:2},{value:"Fenwick Tree Structure",id:"fenwick-tree-structure",level:2},{value:"Implementation",id:"implementation",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"fenwick-tree-tutorial",children:"Fenwick Tree Tutorial"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"A Fenwick Tree, also known as a Binary Indexed Tree (BIT), is a data structure that provides efficient methods for querying and updating prefix sums in an array. It supports operations like point updates and prefix sum queries in O(log n) time."}),"\n",(0,t.jsx)(n.h2,{id:"key-operations",children:"Key Operations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update"}),": Increment the value at a specific index."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Query"}),": Get the sum of values from the start of the array to a specific index."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"fenwick-tree-structure",children:"Fenwick Tree Structure"}),"\n",(0,t.jsx)(n.p,{children:"The Fenwick Tree is typically represented as an array where each position maintains a cumulative sum of elements."}),"\n",(0,t.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s a basic implementation of a Fenwick Tree in JavaScript:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class FenwickTree {\n  constructor(size) {\n    this.size = size;\n    this.tree = new Array(size + 1).fill(0);\n  }\n\n  // Increment the value at index i by delta\n  update(index, delta) {\n    while (index <= this.size) {\n      this.tree[index] += delta;\n      index += index & -index; // Move to the next index\n    }\n  }\n\n  // Get the prefix sum from the start to index i\n  query(index) {\n    let sum = 0;\n    while (index > 0) {\n      sum += this.tree[index];\n      index -= index & -index; // Move to the parent index\n    }\n    return sum;\n  }\n}\n\n// Example Usage\nconst fenwick = new FenwickTree(10);\n\n// Incrementing values\nfenwick.update(1, 5);\nfenwick.update(3, 3);\nfenwick.update(5, 7);\n\n// Querying prefix sums\nconsole.log(fenwick.query(5)); // Output: 15 (5 + 3 + 7)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);