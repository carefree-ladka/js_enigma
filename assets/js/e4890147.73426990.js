"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8671],{9614:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=n(4848),i=n(8453);const o={title:"Trie Data Structure"},s=void 0,a={id:"tutorial-basics/Trie",title:"Trie Data Structure",description:"Trie Data Structure",source:"@site/docs/tutorial-basics/Trie.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Trie",permalink:"/js_enigma/docs/tutorial-basics/Trie",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/Trie.mdx",tags:[],version:"current",frontMatter:{title:"Trie Data Structure"},sidebar:"tutorialSidebar",previous:{title:"Topological Sort Tutorial",permalink:"/js_enigma/docs/tutorial-basics/TopologicalSort"},next:{title:"Two Pointers Technique",permalink:"/js_enigma/docs/tutorial-basics/TwoPointers"}},c={},l=[{value:"Trie Data Structure",id:"trie-data-structure",level:2},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Operations",id:"operations",level:3},{value:"Code Implementation",id:"code-implementation",level:3}];function d(e){const r={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"trie-data-structure",children:"Trie Data Structure"}),"\n",(0,t.jsx)(r.p,{children:"A Trie, also known as a prefix tree or digital tree, is a specialized tree used to store associative data structures. It is commonly used for storing strings or sequences where it can efficiently support operations like insertion, deletion, and prefix search."}),"\n",(0,t.jsx)(r.h3,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Nodes"}),": Each node represents a character of the stored strings."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Edges"}),": The edges between nodes represent the transitions from one character to the next."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Root"}),": The root node represents the starting point of the Trie and does not store any character."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"operations",children:"Operations"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Insertion"}),": Add a new string to the Trie."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Search"}),": Check if a string exists in the Trie."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Prefix Search"}),": Find all strings that share a common prefix."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Deletion"}),": Remove a string from the Trie."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,t.jsx)(r.p,{children:"Here's a basic implementation of a Trie in JavaScript:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:'class TrieNode {\r\n  constructor() {\r\n    this.children = {};\r\n    this.isEndOfWord = false;\r\n  }\r\n}\r\n\r\nclass Trie {\r\n  constructor() {\r\n    this.root = new TrieNode();\r\n  }\r\n\r\n  // Insert a word into the Trie\r\n  insert(word) {\r\n    let node = this.root;\r\n    for (const char of word) {\r\n      if (!node.children[char]) {\r\n        node.children[char] = new TrieNode();\r\n      }\r\n      node = node.children[char];\r\n    }\r\n    node.isEndOfWord = true;\r\n  }\r\n\r\n  // Search for a word in the Trie\r\n  search(word) {\r\n    let node = this.root;\r\n    for (const char of word) {\r\n      if (!node.children[char]) {\r\n        return false;\r\n      }\r\n      node = node.children[char];\r\n    }\r\n    return node.isEndOfWord;\r\n  }\r\n\r\n  // Search for words with a given prefix\r\n  startsWith(prefix) {\r\n    let node = this.root;\r\n    for (const char of prefix) {\r\n      if (!node.children[char]) {\r\n        return false;\r\n      }\r\n      node = node.children[char];\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// Example usage\r\nconst trie = new Trie();\r\ntrie.insert("hello");\r\ntrie.insert("world");\r\n\r\nconsole.log(trie.search("hello")); // Output: true\r\nconsole.log(trie.search("hell")); // Output: false\r\nconsole.log(trie.startsWith("hell")); // Output: true\r\nconsole.log(trie.startsWith("worl")); // Output: true\r\n\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(6540);const i={},o=t.createContext(i);function s(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);