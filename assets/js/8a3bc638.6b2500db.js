"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4339],{229:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var s=i(4848),r=i(8453);const o={title:"Queue"},t="Queue and Monotonic Queue",l={id:"tutorial-basics/Queue",title:"Queue",description:"A queue is a data structure that follows the First-In-First-Out (FIFO) principle. Elements are added at the rear and removed from the front. Queues are commonly used in scenarios where processing order needs to be maintained.",source:"@site/docs/tutorial-basics/Queue.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Queue",permalink:"/docs/tutorial-basics/Queue",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/Queue.mdx",tags:[],version:"current",frontMatter:{title:"Queue"},sidebar:"tutorialSidebar",previous:{title:"Prefix Sum",permalink:"/docs/tutorial-basics/PrefixSum"},next:{title:"Quick Select Algorithm",permalink:"/docs/tutorial-basics/QuickSelect"}},a={},u=[{value:"Applications",id:"applications",level:3},{value:"Example Problems",id:"example-problems",level:3},{value:"Monotonic Queue",id:"monotonic-queue",level:2},{value:"Types",id:"types",level:3},{value:"Example Problems",id:"example-problems-1",level:3},{value:"Monotonic Queue Guide",id:"monotonic-queue-guide",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"queue-and-monotonic-queue",children:"Queue and Monotonic Queue"})}),"\n",(0,s.jsx)(n.p,{children:"A queue is a data structure that follows the First-In-First-Out (FIFO) principle. Elements are added at the rear and removed from the front. Queues are commonly used in scenarios where processing order needs to be maintained."}),"\n",(0,s.jsx)(n.h3,{id:"applications",children:"Applications"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Breadth-First Search (BFS)"}),": Queues are used to explore nodes level by level in graph traversal algorithms."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Task Scheduling"}),": Queues manage tasks in operating systems and job scheduling systems."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Order Processing"}),": Queues handle order processing in systems where tasks are processed in the order they arrive."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-problems",children:"Example Problems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/implement-queue-using-stacks/",children:"Implement Queue using Stacks"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/design-circular-queue/",children:"Design Circular Queue"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-islands/",children:"Number of Islands"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/moving-average-from-data-stream/",children:"Moving Average from Data Stream"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/perfect-squares/",children:"Perfect Squares"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"monotonic-queue",children:"Monotonic Queue"}),"\n",(0,s.jsx)(n.p,{children:"A monotonic queue maintains its elements in a specific order, either increasing or decreasing. It is useful for problems where you need to efficiently manage a sliding window or find the maximum or minimum value in a subarray."}),"\n",(0,s.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Monotonic Increasing Queue"}),": Maintains elements in increasing order from front to rear. Useful for problems like finding the minimum value in a sliding window."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Monotonic Decreasing Queue"}),": Maintains elements in decreasing order from front to rear. Useful for problems like finding the maximum value in a sliding window."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-problems-1",children:"Example Problems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/sliding-window-maximum/",children:"Sliding Window Maximum"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/sliding-window-minimum/",children:"Sliding Window Minimum"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-of-minimum-value-in-a-sliding-window/",children:"Maximum of Minimum Value in a Sliding Window"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/longest-subarray-with-sum-at-most-k/",children:"Longest Subarray with Sum at Most K"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"monotonic-queue-guide",children:"Monotonic Queue Guide"}),"\n",(0,s.jsxs)(n.p,{children:["For a comprehensive guide on monotonic queues, including templates and explanations, refer to the ",(0,s.jsx)(n.a,{href:"https://medium.com/algorithms-and-leetcode/monotonic-queue-explained-with-leetcode-problems-7db7c530c1d6",children:"Monotonic Queue Guide"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Queues and monotonic queues are essential data structures for managing ordered data and solving problems related to sliding windows and range queries. Understanding how to use these queues effectively can greatly enhance your problem-solving skills in competitive programming and real-world applications."})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var s=i(6540);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);